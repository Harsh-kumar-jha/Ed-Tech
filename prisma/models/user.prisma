// User Management Models
model User {
  id                   String    @id @default(uuid())
  email                String    @unique
  username             String?   @unique
  firstName            String?
  lastName             String?
  password             String
  role                 UserRole  @default(STUDENT)
  isActive             Boolean   @default(true)
  isEmailVerified      Boolean   @default(false)
  emailVerifiedAt      DateTime?
  phoneNumber          String?
  countryCode          String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  lastLoginAt          DateTime?
  provider             String    @default("local")
  subscriptionTier     SubscriptionTier  @default(FREE)
  subscriptionStatus   String    @default("active")  // active, cancelled, suspended
  subscriptionEndDate  DateTime?
  subscriptionFeatures String[]  // Array of enabled premium features
  testCount           Int       @default(0)
  premiumTestCount    Int       @default(0)  // Count of tests taken while premium

  // OAuth fields
  googleId            String?   @unique
  facebookId          String?   @unique
  appleId             String?   @unique
  microsoftId         String?   @unique

  // Relations
  profile             UserProfile?
  auditLogs           AuditLog[]
  fileUploads         FileUpload[]
  createdTests        IELTSTest[]        @relation("TestCreator")
  testAttempts        TestAttempt[]
  testResults         TestResult[]
  leaderboardEntries  LeaderboardEntry[]
  writingTests        WritingTest[]
  writingProgress     WritingProgress?
  createdTemplates    WritingTask1Template[] @relation("Task1TemplateCreator")
  sessions            Session[]            @relation("UserSessions")
  otpVerifications    OTPVerification[]    @relation("UserOTPVerifications")
  webhookLogs         WebhookLog[]
  
  // Reading Module Relations
  createdReadingTestSets    ReadingTestSet[]         @relation("ReadingTestSetCreator")
  readingTestAttempts       ReadingTestAttempt[]     @relation("UserReadingAttempts")
  readingTestResults        ReadingTestResult[]      @relation("UserReadingResults")
  readingTestHistory        UserReadingTestHistory[] @relation("UserReadingTestHistory")
  readingAnalytics          ReadingPerformanceAnalytics? @relation("UserReadingAnalytics")
  
  // Global Test Session Relations
  globalTestSessions        GlobalTestSession[]      @relation("UserGlobalTestSessions")
  
  // Listening Module Relations
  createdListeningTests     ListeningTest[]          @relation("ListeningTestCreator")
  listeningTestAttempts     ListeningTestAttempt[]   @relation("UserListeningAttempts")
  listeningTestResults      ListeningTestResult[]    @relation("UserListeningResults")
  listeningTestHistory      UserListeningTestHistory[] @relation("UserListeningTestHistory")
  listeningAnalytics        ListeningPerformanceAnalytics? @relation("UserListeningAnalytics")

  @@map("users")
}

model UserProfile {
  id           String          @id @default(uuid())
  userId       String          @unique
  dateOfBirth  DateTime?
  phone        String?
  country      String?
  language     String?         @default("en")
  timezone     String?         @default("UTC")
  avatar       String?
  bio          String?
  targetScore  Float?
  currentLevel DifficultyLevel @default(BEGINNER)
  studyGoals   String[]
  webhookUrl   String?         // URL for receiving webhook notifications
  webhookSecret String?        // Secret for webhook signature verification
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// Add webhook logging
model WebhookLog {
  id        String   @id @default(uuid())
  userId    String
  event     String
  success   Boolean
  timestamp DateTime @default(now())
  error     String?
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, event])
  @@index([timestamp])
  @@map("webhook_logs")
}

// OTP Verification for phone/email verification and password reset
model OTPVerification {
  id             String   @id @default(uuid())
  identifier     String   // email or phone
  identifierType String   // 'email' or 'phone'
  otp            String
  purpose        String   // 'login', 'password_reset', 'email_verification'
  userId         String?
  expiresAt      DateTime
  attempts       Int      @default(0)
  maxAttempts    Int      @default(3)
  isUsed         Boolean  @default(false)
  createdAt      DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([identifier, purpose, isUsed])
  @@index([expiresAt])
  @@map("otp_verifications")
} 