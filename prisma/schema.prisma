// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// 
// üîß This file is auto-generated from modular files in models/ and enums/
// üìù Edit individual files in those directories, then run: node scripts/build-schema.js

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===========================
// ENUMS
// ===========================

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
  SUPER_ADMIN
}

enum IELTSModule {
  READING
  LISTENING
  WRITING
  SPEAKING
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_BLANK
  ESSAY
  AUDIO_RESPONSE
}

enum TestStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  SUBMITTED
  GRADED
  EXPIRED
}

enum LeaderboardType {
  DAILY
  WEEKLY
  MONTHLY
  GLOBAL
}

enum SubscriptionTier {
  FREE
  PREMIUM
  ENTERPRISE
}

enum ReadingQuestionType {
  TRUE_FALSE_NOT_GIVEN
  YES_NO_NOT_GIVEN
  MULTIPLE_CHOICE
  MATCHING_HEADINGS
  MATCHING_INFORMATION
  MATCHING_PARAGRAPH_INFORMATION
  SENTENCE_COMPLETION
  SUMMARY_COMPLETION
  LIST_OF_HEADINGS
  MULTIPLE_CHOICE_INFERENCE
  CHOOSING_TITLE
  FILL_BLANK
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  resource  String
  resourceId String?
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([resource, createdAt])
  @@map("audit_logs")
}

model OTPVerification {
  id             String   @id @default(uuid())
  identifier     String   // email or phone
  identifierType String   // 'email' or 'phone'
  otp            String
  purpose        String   // 'login', 'password_reset', 'email_verification'
  userId         String?
  expiresAt      DateTime
  attempts       Int      @default(0)
  maxAttempts    Int      @default(3)
  isUsed         Boolean  @default(false)
  createdAt      DateTime @default(now())

  // Relations
  user User? @relation("UserOTPVerifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([identifier, purpose, isUsed])
  @@index([expiresAt])
  @@map("otp_verifications")
}

model FileUpload {
  id           String   @id @default(uuid())
  originalName String
  filename     String   @unique
  path         String
  mimetype     String
  size         Int
  uploadedBy   String
  purpose      String // profile, test, question, etc.
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())

  // Relations
  user User @relation(fields: [uploadedBy], references: [id])

  @@index([uploadedBy, purpose])
  @@index([createdAt])
  @@map("file_uploads")
}

model GlobalTestSession {
  id                String            @id @default(uuid())
  userId            String
  module            IELTSModule       // READING, WRITING, LISTENING, SPEAKING
  moduleTestId      String            // ID of the specific module test (readingTestSetId, writingTestId, etc.)
  moduleAttemptId   String            // ID of the module-specific attempt
  status            TestStatus        @default(NOT_STARTED)
  startedAt         DateTime          @default(now())
  lastActivityAt    DateTime          @default(now())
  expiresAt         DateTime          // Auto-expire after time limit
  timeLimit         Int               // in seconds
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  user User @relation("UserGlobalTestSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, isActive]) // Only one active session per user
  @@index([userId, status])
  @@index([expiresAt])
  @@index([isActive])
  @@map("global_test_sessions")
}

model IELTSTest {
  id             String          @id @default(uuid())
  title          String
  description    String
  module         IELTSModule
  difficulty     DifficultyLevel
  timeLimit      Int // in seconds
  totalQuestions Int
  passingScore   Float
  instructions   String
  isActive       Boolean         @default(true)
  createdBy      String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  // Relations
  creator     User           @relation("TestCreator", fields: [createdBy], references: [id])
  questions   TestQuestion[]
  attempts    TestAttempt[]
  testResults TestResult[]

  @@index([module, difficulty, isActive])
  @@map("ielts_tests")
}

model TestQuestion {
  id           String       @id @default(uuid())
  testId       String
  questionNumber Int
  questionType QuestionType
  questionText String
  options      String[] // JSON array for multiple choice options
  correctAnswer String?
  points       Float
  explanation  String?
  audioUrl     String?
  imageUrl     String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  test    IELTSTest     @relation(fields: [testId], references: [id], onDelete: Cascade)
  answers TestAnswer[]

  @@unique([testId, questionNumber])
  @@index([testId, questionNumber])
  @@map("test_questions")
}

model LeaderboardEntry {
  id             String          @id @default(uuid())
  userId         String
  username       String
  fullName       String
  avatar         String?
  totalScore     Float
  testsCompleted Int
  averageScore   Float
  streak         Int             @default(0)
  rank           Int
  period         LeaderboardType
  periodStart    DateTime
  periodEnd      DateTime
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, period, periodStart])
  @@index([period, rank])
  @@index([period, totalScore])
  @@map("leaderboard_entries")
}

model ReadingTestSet {
  id                String                 @id @default(uuid())
  testId            String                 @unique // From uploaded JSON structure (e.g., "test_1")
  title             String?
  description       String?
  difficulty        DifficultyLevel        @default(INTERMEDIATE)
  timeLimit         Int                    @default(3600) // 60 minutes in seconds
  totalQuestions    Int                    @default(40) // Total questions across 3 passages
  isActive          Boolean                @default(true)
  createdBy         String
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt

  // Relations
  creator           User                   @relation("ReadingTestSetCreator", fields: [createdBy], references: [id])
  passages          ReadingPassage[]
  attempts          ReadingTestAttempt[]
  results           ReadingTestResult[]
  userTestHistory   UserReadingTestHistory[]

  @@index([difficulty, isActive])
  @@index([createdAt])
  @@map("reading_test_sets")
}

model ReadingPassage {
  id                String                 @id @default(uuid())
  testSetId         String
  passageId         String                 // From JSON (e.g., "passage_1", "passage_2", "passage_3")
  passageNumber     Int                    // 1, 2, or 3
  title             String
  content           String                 @db.Text
  wordCount         Int?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt

  // Relations
  testSet           ReadingTestSet         @relation(fields: [testSetId], references: [id], onDelete: Cascade)
  questions         ReadingQuestion[]

  @@unique([testSetId, passageNumber])
  @@index([testSetId, passageNumber])
  @@map("reading_passages")
}

model ReadingQuestion {
  id                String                 @id @default(uuid())
  passageId         String
  questionNumber    Int                    // Global question number (1-40)
  questionType      ReadingQuestionType
  questionText      String                 @db.Text
  options           String[]               // For multiple choice questions
  correctAnswer     String
  points            Float                  @default(1.0)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt

  // Relations
  passage           ReadingPassage         @relation(fields: [passageId], references: [id], onDelete: Cascade)
  answers           ReadingAnswer[]

  @@unique([passageId, questionNumber])
  @@index([passageId, questionNumber])
  @@map("reading_questions")
}

model ReadingTestAttempt {
  id                String                 @id @default(uuid())
  userId            String
  testSetId         String
  status            TestStatus             @default(NOT_STARTED)
  startedAt         DateTime               @default(now())
  completedAt       DateTime?
  submittedAt       DateTime?
  timeSpent         Int                    @default(0) // in seconds
  score             Float?
  totalScore        Float                  @default(40) // Total possible score
  bandScore         Float?                 // IELTS band score (0-9)
  percentage        Float?
  aiSummary         String?                @db.Text
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt

  // Relations
  user              User                   @relation("UserReadingAttempts", fields: [userId], references: [id])
  testSet           ReadingTestSet         @relation(fields: [testSetId], references: [id])
  answers           ReadingAnswer[]
  result            ReadingTestResult?

  @@index([userId, testSetId, status])
  @@index([userId, createdAt])
  @@map("reading_test_attempts")
}

model ReadingAnswer {
  id                String                 @id @default(uuid())
  attemptId         String
  questionId        String
  questionNumber    Int
  userAnswer        String
  isCorrect         Boolean?
  pointsEarned      Float                  @default(0)
  timeSpent         Int                    @default(0) // in seconds
  aiEvaluation      Json?                  // AI feedback object
  createdAt         DateTime               @default(now())

  // Relations
  attempt           ReadingTestAttempt     @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question          ReadingQuestion        @relation(fields: [questionId], references: [id])

  @@unique([attemptId, questionId])
  @@index([attemptId, questionNumber])
  @@map("reading_answers")
}

model ReadingTestResult {
  id                String                 @id @default(uuid())
  userId            String
  testSetId         String
  attemptId         String                 @unique
  score             Float
  totalScore        Float                  @default(40)
  bandScore         Float                  // IELTS band score (0-9)
  percentage        Float
  timeSpent         Int                    // in seconds
  correctAnswers    Int
  wrongAnswers      Int
  skippedAnswers    Int
  passageScores     Json                   // Scores breakdown by passage
  questionTypeScores Json                  // Scores breakdown by question type
  strengths         String[]               // Areas where user performed well
  weaknesses        String[]               // Areas needing improvement
  aiSummary         String?                @db.Text
  aiFeedback        Json?                  // Detailed AI feedback
  createdAt         DateTime               @default(now())

  // Relations
  user              User                   @relation("UserReadingResults", fields: [userId], references: [id])
  testSet           ReadingTestSet         @relation(fields: [testSetId], references: [id])
  attempt           ReadingTestAttempt     @relation(fields: [attemptId], references: [id])

  @@index([userId, createdAt])
  @@index([testSetId, createdAt])
  @@index([bandScore])
  @@map("reading_test_results")
}

model UserReadingTestHistory {
  id                String                 @id @default(uuid())
  userId            String
  testSetId         String
  completedAt       DateTime               @default(now())

  // Relations
  user              User                   @relation("UserReadingTestHistory", fields: [userId], references: [id])
  testSet           ReadingTestSet         @relation(fields: [testSetId], references: [id])

  @@unique([userId, testSetId])
  @@index([userId, completedAt])
  @@map("user_reading_test_history")
}

model ReadingPerformanceAnalytics {
  id                String                 @id @default(uuid())
  userId            String                 @unique
  totalTests        Int                    @default(0)
  averageBandScore  Float?
  bestBandScore     Float?
  latestBandScore   Float?
  averageTimeSpent  Int?                   // in seconds
  strongQuestionTypes String[]             // Question types user excels in
  weakQuestionTypes  String[]              // Question types user struggles with
  lastTestDate      DateTime?
  next24HourTest    DateTime?              // When user can take next test (premium only)
  progressTrend     Json?                  // Last 5 test performance trend
  aiInsights        Json?                  // AI-generated insights and recommendations
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt

  // Relations
  user              User                   @relation("UserReadingAnalytics", fields: [userId], references: [id])

  @@map("reading_performance_analytics")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  userAgent String?
  ipAddress String?
  isActive  Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@index([expiresAt])
  @@map("sessions")
}

model TestAttempt {
  id          String     @id @default(uuid())
  userId      String
  testId      String
  status      TestStatus @default(NOT_STARTED)
  startedAt   DateTime   @default(now())
  completedAt DateTime?
  submittedAt DateTime?
  timeSpent   Int        @default(0) // in seconds
  score       Float?
  totalScore  Float
  percentage  Float?
  aiSummary   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  user    User         @relation(fields: [userId], references: [id])
  test    IELTSTest    @relation(fields: [testId], references: [id])
  answers TestAnswer[]
  result  TestResult?

  @@index([userId, testId, status])
  @@map("test_attempts")
}

model TestAnswer {
  id           String  @id @default(uuid())
  attemptId    String
  questionId   String
  questionNumber Int
  userAnswer   String
  isCorrect    Boolean?
  pointsEarned Float   @default(0)
  timeSpent    Int     @default(0) // in seconds
  aiEvaluation Json? // AI feedback object
  createdAt    DateTime @default(now())

  // Relations
  attempt  TestAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question TestQuestion @relation(fields: [questionId], references: [id])

  @@unique([attemptId, questionId])
  @@index([attemptId, questionNumber])
  @@map("test_answers")
}

model TestResult {
  id            String   @id @default(uuid())
  userId        String
  testId        String
  attemptId     String   @unique
  module        IELTSModule
  difficulty    DifficultyLevel
  score         Float
  totalScore    Float
  percentage    Float
  timeSpent     Int // in seconds
  correctAnswers Int
  wrongAnswers  Int
  skippedAnswers Int
  strengths     String[] // Areas where user performed well
  weaknesses    String[] // Areas needing improvement
  aiSummary     String?
  createdAt     DateTime @default(now())

  // Relations
  user    User        @relation(fields: [userId], references: [id])
  test    IELTSTest   @relation(fields: [testId], references: [id])
  attempt TestAttempt @relation(fields: [attemptId], references: [id])

  @@index([userId, module, createdAt])
  @@index([testId, createdAt])
  @@map("test_results")
}

model User {
  id                   String    @id @default(uuid())
  email                String    @unique
  username             String?   @unique
  firstName            String?
  lastName             String?
  password             String
  role                 UserRole  @default(STUDENT)
  isActive             Boolean   @default(true)
  isEmailVerified      Boolean   @default(false)
  emailVerifiedAt      DateTime?
  phoneNumber          String?
  countryCode          String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  lastLoginAt          DateTime?
  provider             String    @default("local")
  subscriptionTier     SubscriptionTier  @default(FREE)
  subscriptionStatus   String    @default("active")  // active, cancelled, suspended
  subscriptionEndDate  DateTime?
  subscriptionFeatures String[]  // Array of enabled premium features
  testCount           Int       @default(0)
  premiumTestCount    Int       @default(0)  // Count of tests taken while premium

  // OAuth fields
  googleId            String?   @unique
  facebookId          String?   @unique
  appleId             String?   @unique
  microsoftId         String?   @unique

  // Relations
  profile             UserProfile?
  auditLogs           AuditLog[]
  fileUploads         FileUpload[]
  createdTests        IELTSTest[]        @relation("TestCreator")
  testAttempts        TestAttempt[]
  testResults         TestResult[]
  leaderboardEntries  LeaderboardEntry[]
  writingTests        WritingTest[]
  writingProgress     WritingProgress?
  createdTemplates    WritingTask1Template[] @relation("Task1TemplateCreator")
  sessions            Session[]            @relation("UserSessions")
  otpVerifications    OTPVerification[]    @relation("UserOTPVerifications")
  webhookLogs         WebhookLog[]
  
  // Reading Module Relations
  createdReadingTestSets    ReadingTestSet[]         @relation("ReadingTestSetCreator")
  readingTestAttempts       ReadingTestAttempt[]     @relation("UserReadingAttempts")
  readingTestResults        ReadingTestResult[]      @relation("UserReadingResults")
  readingTestHistory        UserReadingTestHistory[] @relation("UserReadingTestHistory")
  readingAnalytics          ReadingPerformanceAnalytics? @relation("UserReadingAnalytics")
  
  // Global Test Session Relations
  globalTestSessions        GlobalTestSession[]      @relation("UserGlobalTestSessions")

  @@map("users")
}

model UserProfile {
  id           String          @id @default(uuid())
  userId       String          @unique
  dateOfBirth  DateTime?
  phone        String?
  country      String?
  language     String?         @default("en")
  timezone     String?         @default("UTC")
  avatar       String?
  bio          String?
  targetScore  Float?
  currentLevel DifficultyLevel @default(BEGINNER)
  studyGoals   String[]
  webhookUrl   String?         // URL for receiving webhook notifications
  webhookSecret String?        // Secret for webhook signature verification
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model WebhookLog {
  id        String   @id @default(uuid())
  userId    String
  event     String
  success   Boolean
  timestamp DateTime @default(now())
  error     String?
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, event])
  @@index([timestamp])
  @@map("webhook_logs")
}

model WritingTest {
  id              String    @id @default(uuid())
  userId          String
  testSessionId   String    @unique
  testType        String
  status          String    @default("pending")
  task1Prompt     String?
  task2Prompt     String?
  task1Response   String?
  task2Response   String?
  task1Band       Float?
  task2Band       Float?
  combinedBand    Float?
  task1Feedback   Json?
  task2Feedback   Json?
  overallFeedback Json?
  task1CompletedAt DateTime?
  task2CompletedAt DateTime?
  evaluatedAt     DateTime?
  deleteQuestionsAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
  task1Evaluation TaskEvaluation? @relation("Task1Evaluation")
  task2Evaluation TaskEvaluation? @relation("Task2Evaluation")

  @@index([userId])
  @@index([testType])
  @@index([status])
  @@index([deleteQuestionsAt])
  @@map("writing_tests")
}

model TaskEvaluation {
  id           String    @id @default(uuid())
  writingTestId String   @unique
  taskType     String    // "task1" or "task2"
  band         Float
  feedback     String
  strengths    String[]
  improvements String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  writingTestTask1 WritingTest? @relation("Task1Evaluation", fields: [writingTestId], references: [id], onDelete: Cascade, map: "task1_evaluation_writing_test_fk")
  writingTestTask2 WritingTest? @relation("Task2Evaluation", fields: [writingTestId], references: [id], onDelete: Cascade, map: "task2_evaluation_writing_test_fk")

  @@map("task_evaluations")
}

model WritingProgress {
  id              String   @id @default(uuid())
  userId          String   @unique
  testCount       Int      @default(0)
  averageBand     Float?
  bestBand        Float?
  progressAnalysis Json?
  lastUpdated     DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("writing_progress")
}

model WritingTask1Template {
  id          String   @id @default(uuid())
  type        String   // e.g., "Bar chart", "Line graph", "Pie chart", "Map", "Process", etc.
  prompt      String   @db.Text
  imageUrl    String   @map("image_url")
  imagePublicId String? @map("image_public_id") // Cloudinary public ID for deletion
  description String?  @db.Text // Optional template description
  difficulty  String?  // beginner, intermediate, advanced
  testType    String?  @map("test_type") // academic, general_training
  tags        String[] @default([]) // Array of tags for categorization
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   // Admin user ID who created this template
  isActive    Boolean  @default(true)

  // Relations
  user User @relation("Task1TemplateCreator", fields: [createdBy], references: [id])

  @@map("writing_task1_templates")
  @@index([type])
  @@index([createdBy])
  @@index([difficulty])
  @@index([testType])
  @@index([isActive])
}

