// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// 
// üîß This file is auto-generated from modular files in models/ and enums/
// üìù Edit individual files in those directories, then run: node scripts/build-schema.js

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===========================
// ENUMS
// ===========================

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
  SUPER_ADMIN
}

enum IELTSModule {
  READING
  LISTENING
  WRITING
  SPEAKING
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_BLANK
  ESSAY
  AUDIO_RESPONSE
}

enum TestStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  SUBMITTED
  GRADED
  EXPIRED
}

enum LeaderboardType {
  DAILY
  WEEKLY
  MONTHLY
  GLOBAL
}

enum SubscriptionTier {
  FREE
  PREMIUM
  ENTERPRISE
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  resource  String
  resourceId String?
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([resource, createdAt])
  @@map("audit_logs")
}

model OTPVerification {
  id             String   @id @default(uuid())
  identifier     String   // email or phone
  identifierType String   // 'email' or 'phone'
  otp            String
  purpose        String   // 'login', 'password_reset', 'email_verification'
  userId         String?
  expiresAt      DateTime
  attempts       Int      @default(0)
  maxAttempts    Int      @default(3)
  isUsed         Boolean  @default(false)
  createdAt      DateTime @default(now())

  // Relations
  user User? @relation("UserOTPVerifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([identifier, purpose, isUsed])
  @@index([expiresAt])
  @@map("otp_verifications")
}

model FileUpload {
  id           String   @id @default(uuid())
  originalName String
  filename     String   @unique
  path         String
  mimetype     String
  size         Int
  uploadedBy   String
  purpose      String // profile, test, question, etc.
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())

  // Relations
  user User @relation(fields: [uploadedBy], references: [id])

  @@index([uploadedBy, purpose])
  @@index([createdAt])
  @@map("file_uploads")
}

model IELTSTest {
  id             String          @id @default(uuid())
  title          String
  description    String
  module         IELTSModule
  difficulty     DifficultyLevel
  timeLimit      Int // in seconds
  totalQuestions Int
  passingScore   Float
  instructions   String
  isActive       Boolean         @default(true)
  createdBy      String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  // Relations
  creator     User           @relation("TestCreator", fields: [createdBy], references: [id])
  questions   TestQuestion[]
  attempts    TestAttempt[]
  testResults TestResult[]

  @@index([module, difficulty, isActive])
  @@map("ielts_tests")
}

model TestQuestion {
  id           String       @id @default(uuid())
  testId       String
  questionNumber Int
  questionType QuestionType
  questionText String
  options      String[] // JSON array for multiple choice options
  correctAnswer String?
  points       Float
  explanation  String?
  audioUrl     String?
  imageUrl     String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  test    IELTSTest     @relation(fields: [testId], references: [id], onDelete: Cascade)
  answers TestAnswer[]

  @@unique([testId, questionNumber])
  @@index([testId, questionNumber])
  @@map("test_questions")
}

model LeaderboardEntry {
  id             String          @id @default(uuid())
  userId         String
  username       String
  fullName       String
  avatar         String?
  totalScore     Float
  testsCompleted Int
  averageScore   Float
  streak         Int             @default(0)
  rank           Int
  period         LeaderboardType
  periodStart    DateTime
  periodEnd      DateTime
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, period, periodStart])
  @@index([period, rank])
  @@index([period, totalScore])
  @@map("leaderboard_entries")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  userAgent String?
  ipAddress String?
  isActive  Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@index([expiresAt])
  @@map("sessions")
}

model TestAttempt {
  id          String     @id @default(uuid())
  userId      String
  testId      String
  status      TestStatus @default(NOT_STARTED)
  startedAt   DateTime   @default(now())
  completedAt DateTime?
  submittedAt DateTime?
  timeSpent   Int        @default(0) // in seconds
  score       Float?
  totalScore  Float
  percentage  Float?
  aiSummary   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  user    User         @relation(fields: [userId], references: [id])
  test    IELTSTest    @relation(fields: [testId], references: [id])
  answers TestAnswer[]
  result  TestResult?

  @@index([userId, testId, status])
  @@map("test_attempts")
}

model TestAnswer {
  id           String  @id @default(uuid())
  attemptId    String
  questionId   String
  questionNumber Int
  userAnswer   String
  isCorrect    Boolean?
  pointsEarned Float   @default(0)
  timeSpent    Int     @default(0) // in seconds
  aiEvaluation Json? // AI feedback object
  createdAt    DateTime @default(now())

  // Relations
  attempt  TestAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question TestQuestion @relation(fields: [questionId], references: [id])

  @@unique([attemptId, questionId])
  @@index([attemptId, questionNumber])
  @@map("test_answers")
}

model TestResult {
  id            String   @id @default(uuid())
  userId        String
  testId        String
  attemptId     String   @unique
  module        IELTSModule
  difficulty    DifficultyLevel
  score         Float
  totalScore    Float
  percentage    Float
  timeSpent     Int // in seconds
  correctAnswers Int
  wrongAnswers  Int
  skippedAnswers Int
  strengths     String[] // Areas where user performed well
  weaknesses    String[] // Areas needing improvement
  aiSummary     String?
  createdAt     DateTime @default(now())

  // Relations
  user    User        @relation(fields: [userId], references: [id])
  test    IELTSTest   @relation(fields: [testId], references: [id])
  attempt TestAttempt @relation(fields: [attemptId], references: [id])

  @@index([userId, module, createdAt])
  @@index([testId, createdAt])
  @@map("test_results")
}

model User {
  id                   String    @id @default(uuid())
  email                String    @unique
  username             String?   @unique
  firstName            String?
  lastName             String?
  password             String
  role                 UserRole  @default(STUDENT)
  isActive             Boolean   @default(true)
  isEmailVerified      Boolean   @default(false)
  emailVerifiedAt      DateTime?
  phoneNumber          String?
  countryCode          String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  lastLoginAt          DateTime?
  provider             String    @default("local")
  subscriptionTier     SubscriptionTier  @default(FREE)
  subscriptionStatus   String    @default("active")  // active, cancelled, suspended
  subscriptionEndDate  DateTime?
  subscriptionFeatures String[]  // Array of enabled premium features
  testCount           Int       @default(0)
  premiumTestCount    Int       @default(0)  // Count of tests taken while premium

  // OAuth fields
  googleId            String?   @unique
  facebookId          String?   @unique
  appleId             String?   @unique
  microsoftId         String?   @unique

  // Relations
  profile             UserProfile?
  auditLogs           AuditLog[]
  fileUploads         FileUpload[]
  createdTests        IELTSTest[]        @relation("TestCreator")
  testAttempts        TestAttempt[]
  testResults         TestResult[]
  leaderboardEntries  LeaderboardEntry[]
  writingTests        WritingTest[]
  writingProgress     WritingProgress?
  createdTemplates    WritingTask1Template[] @relation("Task1TemplateCreator")
  sessions            Session[]            @relation("UserSessions")
  otpVerifications    OTPVerification[]    @relation("UserOTPVerifications")
  webhookLogs         WebhookLog[]

  @@map("users")
}

model UserProfile {
  id           String          @id @default(uuid())
  userId       String          @unique
  dateOfBirth  DateTime?
  phone        String?
  country      String?
  language     String?         @default("en")
  timezone     String?         @default("UTC")
  avatar       String?
  bio          String?
  targetScore  Float?
  currentLevel DifficultyLevel @default(BEGINNER)
  studyGoals   String[]
  webhookUrl   String?         // URL for receiving webhook notifications
  webhookSecret String?        // Secret for webhook signature verification
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model WebhookLog {
  id        String   @id @default(uuid())
  userId    String
  event     String
  success   Boolean
  timestamp DateTime @default(now())
  error     String?
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, event])
  @@index([timestamp])
  @@map("webhook_logs")
}

model WritingTest {
  id              String    @id @default(uuid())
  userId          String
  testSessionId   String    @unique
  testType        String
  status          String    @default("pending")
  task1Prompt     String?
  task2Prompt     String?
  task1Response   String?
  task2Response   String?
  task1Band       Float?
  task2Band       Float?
  combinedBand    Float?
  task1Feedback   Json?
  task2Feedback   Json?
  overallFeedback Json?
  task1CompletedAt DateTime?
  task2CompletedAt DateTime?
  evaluatedAt     DateTime?
  deleteQuestionsAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
  task1Evaluation TaskEvaluation? @relation("Task1Evaluation")
  task2Evaluation TaskEvaluation? @relation("Task2Evaluation")

  @@index([userId])
  @@index([testType])
  @@index([status])
  @@index([deleteQuestionsAt])
  @@map("writing_tests")
}

model TaskEvaluation {
  id           String    @id @default(uuid())
  writingTestId String   @unique
  taskType     String    // "task1" or "task2"
  band         Float
  feedback     String
  strengths    String[]
  improvements String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  writingTestTask1 WritingTest? @relation("Task1Evaluation", fields: [writingTestId], references: [id], onDelete: Cascade, map: "task1_evaluation_writing_test_fk")
  writingTestTask2 WritingTest? @relation("Task2Evaluation", fields: [writingTestId], references: [id], onDelete: Cascade, map: "task2_evaluation_writing_test_fk")

  @@map("task_evaluations")
}

model WritingProgress {
  id              String   @id @default(uuid())
  userId          String   @unique
  testCount       Int      @default(0)
  averageBand     Float?
  bestBand        Float?
  progressAnalysis Json?
  lastUpdated     DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("writing_progress")
}

model WritingTask1Template {
  id          String   @id @default(uuid())
  type        String   // e.g., "Bar chart", "Line graph", "Pie chart", "Map", "Process", etc.
  prompt      String   @db.Text
  imageUrl    String   @map("image_url")
  imagePublicId String? @map("image_public_id") // Cloudinary public ID for deletion
  description String?  @db.Text // Optional template description
  difficulty  String?  // beginner, intermediate, advanced
  testType    String?  @map("test_type") // academic, general_training
  tags        String[] @default([]) // Array of tags for categorization
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   // Admin user ID who created this template
  isActive    Boolean  @default(true)

  // Relations
  user User @relation("Task1TemplateCreator", fields: [createdBy], references: [id])

  @@map("writing_task1_templates")
  @@index([type])
  @@index([createdBy])
  @@index([difficulty])
  @@index([testType])
  @@index([isActive])
}

